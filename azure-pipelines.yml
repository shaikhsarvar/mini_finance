trigger:
- main  # Or your specific branch name

pool:
  name: 'local pc'  # Your self-hosted agent name

variables:
  dockerHubUsername: 'sksarvar'
  imageName: 'ubuntu-app'
  imageTag: 'v2.1'
  dockerRegistryServiceConnection: 'dockerhub-azuredevops'
  sonarProjectKey: 'mini-finance'   # Change as needed
  sonarHostUrl: 'http://localhost:9000'  # Your SonarQube URL
  sonarLogin: '$(SONAR_TOKEN)'  # Store your SonarQube token in pipeline secrets
  dockerfilePath: '**/Dockerfile'  # Optional: adjust if Dockerfile location changes

steps:
# Checkout the repo first
- checkout: self
  displayName: 'Checkout source code'

# 1. Prepare SonarQube Analysis
- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'SonarQube'  # Name of your SonarQube service connection
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: '$(sonarProjectKey)'
    cliSources: '.'
    cliHostUrl: '$(sonarHostUrl)'
    cliLogin: '$(sonarLogin)'

# 2. Run SonarQube Scanner (fail if error)
- script: |
    set -e
    sonar-scanner
  displayName: 'Run SonarQube Scanner'

# 3. Publish SonarQube analysis results
- task: SonarQubeAnalyze@5

# 4. Build and Push Docker Image to Docker Hub
- task: Docker@2
  displayName: 'Build and Push Docker Image to Docker Hub'
  inputs:
    containerRegistry: $(dockerRegistryServiceConnection)
    repository: '$(dockerHubUsername)/$(imageName)'
    command: 'buildAndPush'
    Dockerfile: '$(dockerfilePath)'
    tags: |
      $(imageTag)

# 5. Deploy Docker Container Locally
- script: |
    echo "Pulling image from Docker Hub..."
    docker pull $(dockerHubUsername)/$(imageName):$(imageTag)

    echo "Stopping existing container (if any)..."
    docker rm -f ubuntu-app || true

    echo "Running container on port 9090..."
    docker run -d --name ubuntu-app -p 9090:80 $(dockerHubUsername)/$(imageName):$(imageTag)

    echo "Deployment complete. Access app at: http://localhost:9090/"
  displayName: 'Deploy Docker Container on Local PC'
